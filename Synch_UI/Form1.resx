<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RRd4YT1yc147fXReO31zXjt9c147fXNeO31zXTt8cl48enRePHx4YT5xhm1FGr+cZSu+nGffvZtm+72b
        Zvm9m2b5vZtm+b2bZvm9m2b5vZtm+b2bZvm+nGf1v51nUcKgagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADEoWkAwp9oPMKgavPBn2n/wp9p/sGfaf7Cn2n+wZ9p/sGfaf7Bn2n+wZ9p/8KgavHCn2hExqRwMcio
        dOnJqHX/yah1/8iodP/Ip3P/yKdy/8emcv/IpnL/yKZy/8imcv7GpXBbyadzAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMindADHpnJCyah29smpdv/JqXb/yah2/8iodP/Ip3P/yKdz/8inc//Ip3P/yKdz9Mal
        cEvKq3w4zK6A7M2vgf/Nr4D/zK+A/8ytfv/LrHz/yqt7/8qrev/Kqnn/yqp5/8mpd2LLrHsASzkfAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAzK+BAMutfknNr4L5zbCC/82wgv/Nr4H/zK5//8utff/LrHz/yqt6/8qr
        ev/Kq3r3yKl3U86yh0PRtozx0baN/9G2jf/Rtoz/0LSJ/8+yh//OsYT/za+B/8yuf//Mrn//yqx8bs6x
        gwCkdy4AAAAAAAAAAAAAAAAAAAAAAAAAAADRto0Az7SJVdG2jfzSt47/0reO/9G2jf/QtYr/z7OI/86x
        hf/NsIL/zK+A/8yugPrKrHxg0riQU9W7lvrVvJf/1byX/9S7lv/TupP/0riQ/9G2jP/QtIn/zrKF/86x
        hP/Nr4KA07eNALqWXQAAAAAAAAAAAAAAAAAAAAAAAAAAANa9mQDTupJm1byX/9W9mP/VvZj/1byW/9S6
        k//SuJD/0baM/9C0if/Osob/zrGF/82vgnTUu5ZE17+cv9rEo/LaxaT/2sSj/9nDof/YwZ7/1r+a/9W8
        lv/TuZH+0LSJ086xhWTXvZYAv5xmAAAAAAAAAAAAAAAAAAAAAAAAAAAA2MGeANW8l0XYwJ6x28am8tvH
        qP/bxqf/2sWk/9nDof3YwZ791r6Z/tO6kvTQtIm0zrGETtC2jwLVvZkL4tG4f+PUvOrk1b3s4NG6tdjJ
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAA=
</value>
  </data>
</root>